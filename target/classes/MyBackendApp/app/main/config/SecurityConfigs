package MyBackendApp.app.main.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.stereotype.Component;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(securedEnabled = true)

@Component
    public class SecurityConfigs extends WebSecurityConfigurerAdapter {
        
        @Override
        public SecurityConfigs(CustomAuthenticationProvider customAuthenticationProvider) {
        this.customAuthenticationProvider = customAuthenticationProvider;
    }
        @Autowired
        private CustomAuthenticationProvider customAuthenticationProvider;

        @Bean
        public PasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder();
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http
                .authorizeRequests()
                    .antMatchers("/swagger-ui/**", "/v3/api-docs/**","/login/**").permitAll()  // Permettre l'accès à Swagger
                    .anyRequest().authenticated()  // Exiger une authentification pour toutes les autres URL
                .and()
                .formLogin()  // Utiliser un formulaire de login
                    .permitAll()
                .and()
                .httpBasic();  // Optionnel : pour permettre l'authentification de base HTTP
        }

        @Override
        @Bean
        public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }
        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    // Ajouter notre AuthenticationProvider personnalisé
        auth.authenticationProvider(customAuthenticationProvider);
}
}